// Prisma schema for the school application

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Subject {
  id                  String                @id @default(uuid())
  name                String
  ClassSubjectTeacher ClassSubjectTeacher[]
  EvaluationCategory  EvaluationCategory[]
}

model EvaluationCategory {
  id               String            @id @default(uuid())
  name             String
  year             String
  EvaluationTopics EvaluationTopic[]
  subjectId        String
  Subject          Subject           @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model EvaluationTopic {
  id                   String               @id @default(uuid())
  name                 String
  subtopics            EvaluationSubTopic[]
  evaluationCategoryId String
  EvaluationCategory   EvaluationCategory   @relation(fields: [evaluationCategoryId], references: [id], onDelete: Cascade)
}

model EvaluationSubTopic {
  id                String          @id @default(uuid())
  name              String          @db.Text
  evaluationTopicId String
  evaluationTopic   EvaluationTopic @relation(fields: [evaluationTopicId], references: [id], onDelete: Cascade)
  Grade             Grade[]
}

model Teacher {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  password            String
  lastLoggedIn        DateTime?
  ClassSubjectTeacher ClassSubjectTeacher[]
}

model Class {
  id                  String                @id @default(uuid())
  name                String
  year                String
  students            ClassStudent[]
  ClassSubjectTeacher ClassSubjectTeacher[]
}

model ClassSubjectTeacher {
  id          String  @id @default(uuid())
  teacherId   String
  teacher     Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classId     String
  schoolClass Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjectId   String
  Subject     Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model Student {
  id      String         @id @default(uuid())
  name    String
  classes ClassStudent[]
  grades  Grade[]
}

model ClassStudent {
  id        String  @id @default(uuid())
  classId   String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Grade {
  id                   String             @id @default(uuid())
  evaluationSubTopicId String
  evaluationSubTopic   EvaluationSubTopic @relation(fields: [evaluationSubTopicId], references: [id], onDelete: Cascade)
  studentId            String
  student              Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  grade                String
  createdAt            DateTime           @default(now())
}
